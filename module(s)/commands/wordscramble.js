const { loadMoneyData, saveMoneyData, formatMoney } = require('../../core(s)/utils/index');

const vietnameseWords = [
  "ƒëi·ªán tho·∫°i", "m√°y t√≠nh", "b√†n ph√≠m", "chu·ªôt", "tivi", "m√°y gi·∫∑t", "b·∫øp ga", "qu·∫°t ƒëi·ªán", "ƒë√®n", "gh·∫ø sofa",
  "l√°i xe", "th√¥ng minh", "ƒëi·ªán t·ª≠", "th√†nh ph·ªë", "tr∆∞·ªùng h·ªçc", "kh√¥ng gian", "t∆∞∆°ng lai", "s√°ng t·∫°o", "kho·∫£ng c√°ch", "qu·∫£n l√Ω",
  "c√¥ng ty", "x√£ h·ªôi", "c√¥ng nghi·ªáp", "d·ªãch v·ª•", "s·∫£n xu·∫•t", "k·ªπ thu·∫≠t", "ti·∫øp th·ªã", "chuy·ªÉn giao", "ƒë·ªïi m·ªõi", "n√¢ng cao",
  "k·∫øt n·ªëi", "h·ª£p t√°c", "li√™n k·∫øt", "c·ªông t√°c", "gi·∫£i ph√°p", "tri·ªÉn khai", "th·ª≠ nghi·ªám", "t·ªï ch·ª©c", "kh·ªüi nghi·ªáp", "qu·∫£n l√Ω",
  "ƒë·∫ßu t∆∞", "t√†i s·∫£n", "nh√¢n s·ª±", "h·∫° t·∫ßng", "k·∫ø ho·∫°ch", "d·ª± √°n", "kinh doanh", "ho·∫°t ƒë·ªông", "s·ª± ki·ªán", "c∆° h·ªôi",
  "th√°ch th·ª©c", "s√°ng t·∫°o", "truy·ªÅn th√¥ng", "x√£ giao", "t∆∞∆°ng t√°c", "h√†nh ch√≠nh", "th·ª±c hi·ªán", "tr√¨nh ƒë·ªô", "ph∆∞∆°ng √°n", "s·∫£n ph·∫©m",
  "ch·∫•t l∆∞·ª£ng", "c·∫£i ti·∫øn", "hi·ªáu qu·∫£", "gia tƒÉng", "·ª©ng d·ª•ng", "h·ªá th·ªëng", "ph√¢n ph·ªëi", "ti√™u chu·∫©n", "t·ªëi ∆∞u", "c√¥ng c·ª•",
  "th∆∞∆°ng m·∫°i", "nƒÉng l∆∞·ª£ng", "v·∫≠t li·ªáu", "m√¥i tr∆∞·ªùng", "kh√≠ h·∫≠u", "ch√≠nh s√°ch", "h·ª£p ƒë·ªìng", "c·∫•p b√°ch", "ƒë·∫ßu ra", "ƒë·∫ßu v√†o",
  "ch·∫ø ƒë·ªô", "ph√°t tri·ªÉn", "di·ªÖn ƒë√†n", "thanh to√°n", "s·∫£n l∆∞·ª£ng", "d·ªØ li·ªáu", "b·∫£o v·ªá", "an to√†n", "b·∫£o m·∫≠t", "kh·∫£o s√°t",
  "th·ªß t·ª•c", "t√†i li·ªáu", "trang b·ªã", "b·ªô ph·∫≠n", "c√¥ng ngh·ªá", "h√†nh tr√¨nh", "s·ª± ki·ªán", "t√¨nh hu·ªëng", "k·ªπ nƒÉng", "kƒ© thu·∫≠t",
  "b·∫Øt ƒë·∫ßu", "k·∫øt th√∫c", "ph√°t h√†nh", "b·∫£o d∆∞·ª°ng", "v·∫≠n h√†nh", "s·ª≠ d·ª•ng", "tham gia", "h·ªó tr·ª£", "ƒë√†o t·∫°o", "nghi√™n c·ª©u",
  "l·∫≠p k·∫ø ho·∫°ch", "th·ª±c hi·ªán", "c·∫£i thi·ªán", "t·ªëi ∆∞u h√≥a", "ƒë·ªïi m·ªõi", "ti·∫øp th·ªã", "tƒÉng c∆∞·ªùng", "ƒë√°nh gi√°", "ƒë·ªëi t√°c", "t·ªï ch·ª©c",
  "s·∫£n xu·∫•t", "kinh doanh", "thi·∫øt k·∫ø", "ch·∫ø t·∫°o", "ph√¢n ph·ªëi", "qu·∫£n l√Ω", "d·ªãch v·ª•", "b·∫£o tr√¨", "ki·ªÉm tra", "qu·∫£n l√Ω",
  "ch·∫•t l∆∞·ª£ng", "t√†i ch√≠nh", "k·∫ø to√°n", "t∆∞ v·∫•n", "x√¢y d·ª±ng", "v·∫≠n h√†nh", "trung t√¢m", "ph√°t tri·ªÉn", "nghi√™n c·ª©u", "h·ª£p t√°c",
  "h·ªôi th·∫£o", "h·ªôi ngh·ªã", "s·ª± ki·ªán", "th·ª±c t·∫ø", "t∆∞∆°ng lai", "th√†nh ph·ªë", "v√πng l√£nh th·ªï", "qu·ªëc gia", "qu·ªëc t·∫ø", "ƒë·ªãa ph∆∞∆°ng",
  "h√†ng h√≥a", "d·ªãch v·ª•", "th∆∞∆°ng m·∫°i", "th∆∞∆°ng hi·ªáu", "nh√£n hi·ªáu", "qu·∫£ng c√°o", "ti·∫øp th·ªã", "m√¥i tr∆∞·ªùng", "kh√≠ h·∫≠u", "ch√≠nh ph·ªß",
  "doanh nghi·ªáp", "c√¥ng ty", "t·ªï ch·ª©c", "t·∫≠p ƒëo√†n", "c√° nh√¢n", "ph√°t tri·ªÉn", "thi·∫øt k·∫ø", "s·∫£n xu·∫•t", "d·ªãch v·ª•", "k·ªπ thu·∫≠t",
  "th∆∞∆°ng m·∫°i", "n√¥ng nghi·ªáp", "c√¥ng nghi·ªáp", "ƒë·∫ßu t∆∞", "t√†i ch√≠nh", "k·∫ø to√°n", "t∆∞ v·∫•n", "ch√≠nh s√°ch", "qu·∫£n l√Ω", "h√†nh ch√≠nh",
  "h√†nh ƒë·ªông", "tr√°ch nhi·ªám", "vai tr√≤", "nguy√™n t·∫Øc", "l·ª£i √≠ch", "t√≠n d·ª•ng", "thanh kho·∫£n", "t√†i li·ªáu", "thi·∫øt b·ªã", "b·∫£o d∆∞·ª°ng",
  "v·∫≠n h√†nh", "s·ª≠ d·ª•ng", "t∆∞∆°ng t√°c", "giao ti·∫øp", "ti·∫øp nh·∫≠n", "ph√¢n ph·ªëi", "cung c·∫•p", "t√°i ch·∫ø", "ph√°t tri·ªÉn", "t·∫°o ra",
  "n√¢ng cao", "ƒë·ªïi m·ªõi", "tƒÉng c∆∞·ªùng", "th·ª±c hi·ªán", "qu·∫£n l√Ω", "x√¢y d·ª±ng", "ph√°t tri·ªÉn", "s·ª≠ d·ª•ng", "l∆∞u tr·ªØ", "b·∫£o m·∫≠t",
  "qu·∫£n l√Ω", "d·ªØ li·ªáu", "ph√°t h√†nh", "ch√≠nh s√°ch", "quy ƒë·ªãnh", "k·ªπ nƒÉng", "chuy√™n m√¥n", "s√°ng t·∫°o", "c·∫£i ti·∫øn", "t·ªëi ∆∞u h√≥a",
  "th√≠ nghi·ªám", "th·ªëng k√™", "k·∫ø ho·∫°ch", "chi·∫øn l∆∞·ª£c", "h·ª£p ƒë·ªìng", "c√¥ng ngh·ªá", "c√¥ng c·ª•", "ph∆∞∆°ng ph√°p", "ph∆∞∆°ng ti·ªán", "quy tr√¨nh",
  "ph∆∞∆°ng √°n", "k·∫øt qu·∫£", "ƒë√°nh gi√°", "thi·∫øt l·∫≠p", "th·ª±c hi·ªán", "b·∫£o tr√¨", "ki·ªÉm tra", "ƒë√°nh gi√°", "x·ª≠ l√Ω", "ph√¢n t√≠ch",
  "tƒÉng c∆∞·ªùng", "ph√°t tri·ªÉn", "qu·∫£n l√Ω", "nghi√™n c·ª©u", "th·ª±c thi", "h·ªó tr·ª£", "ƒë√†o t·∫°o", "v·∫≠n h√†nh", "t√°i ch·∫ø", "t√°i t·∫°o",
  "t√≠ch h·ª£p", "t·ªëi ∆∞u", "ƒë·ªïi m·ªõi", "kh·∫£o s√°t", "th·ª≠ nghi·ªám", "tham v·∫•n", "c·ªë v·∫•n", "chuy√™n gia", "b√°o c√°o", "th√¥ng b√°o",
  "truy·ªÅn th√¥ng", "qu·∫£ng b√°", "th∆∞∆°ng m·∫°i", "d·ªãch v·ª•", "h·ªôi ngh·ªã", "h·ªôi th·∫£o", "s·ª± ki·ªán", "ch√≠nh s√°ch", "ƒë·ªãnh h∆∞·ªõng", "ƒëi·ªÅu ch·ªânh",
  "nƒÉng su·∫•t", "hi·ªáu qu·∫£", "t·ªëi ƒëa", "t·ªëi thi·ªÉu", "n√¢ng cao", "gi·∫£m thi·ªÉu", "tƒÉng tr∆∞·ªüng", "ph√°t tri·ªÉn", "v·∫≠n h√†nh", "qu·∫£n l√Ω",
  "thi·∫øt l·∫≠p", "ƒëi·ªÅu ch·ªânh", "ƒëi·ªÅu h√†nh", "d·∫´n d·∫Øt", "l√£nh ƒë·∫°o", "ph√°t huy", "th√∫c ƒë·∫©y", "khuy·∫øn kh√≠ch", "ph√°t tri·ªÉn", "th√∫c ƒë·∫©y",
  "t·∫°o ƒëi·ªÅu ki·ªán", "c∆° s·ªü h·∫° t·∫ßng", "k·ªπ thu·∫≠t", "ph∆∞∆°ng ph√°p", "ph∆∞∆°ng √°n", "quy tr√¨nh", "ph∆∞∆°ng ti·ªán", "quy t·∫Øc", "quy ƒë·ªãnh", "ti√™u chu·∫©n",
  "c√¥ng c·ª•", "ph·∫ßn m·ªÅm", "h·ªá th·ªëng", "thi·∫øt b·ªã", "trang b·ªã", "c√¥ng ngh·ªá", "·ª©ng d·ª•ng", "c∆° s·ªü", "d·ª± √°n", "s·∫£n ph·∫©m",
  "d·ªãch v·ª•", "qu·∫£n l√Ω", "t√†i ch√≠nh", "k·∫ø to√°n", "t∆∞ v·∫•n", "chuy√™n gia", "thi·∫øt k·∫ø", "s·∫£n xu·∫•t", "d·ªãch v·ª•", "b·∫£o tr√¨",
  "ki·ªÉm tra", "ƒë√°nh gi√°", "ƒë√°nh gi√°", "th√≠ nghi·ªám", "ph√¢n t√≠ch", "ph√¢n t√≠ch", "d·ª± b√°o", "th·ªëng k√™", "th·ªëng k√™", "ph√¢n ph·ªëi",
  "t·ªï ch·ª©c", "s·ª± ki·ªán", "h·ªôi ngh·ªã", "h·ªôi th·∫£o", "giao ti·∫øp", "truy·ªÅn th√¥ng", "qu·∫£ng b√°", "ti·∫øp th·ªã", "th∆∞∆°ng m·∫°i", "qu·∫£n l√Ω",
  "tƒÉng c∆∞·ªùng", "ph√°t tri·ªÉn", "s·ª≠ d·ª•ng", "n√¢ng cao", "c·∫£i thi·ªán", "ch√≠nh s√°ch", "ƒëi·ªÅu ch·ªânh", "ƒë√†o t·∫°o", "v·∫≠n h√†nh", "th·ª±c thi",
  "ƒë·ªïi m·ªõi", "thi·∫øt l·∫≠p", "t·ªëi ∆∞u", "t√°i ch·∫ø", "t√°i t·∫°o", "kh·∫£o s√°t", "th·ª≠ nghi·ªám", "tham v·∫•n", "c·ªë v·∫•n", "chuy√™n gia",
  "b√°o c√°o", "th√¥ng b√°o", "th√¥ng tin", "h∆∞·ªõng d·∫´n", "ch√≠nh s√°ch", "k·∫ø ho·∫°ch", "chi·∫øn l∆∞·ª£c", "ph∆∞∆°ng √°n", "c√¥ng c·ª•", "ph∆∞∆°ng ph√°p",
  "quy tr√¨nh", "ph∆∞∆°ng ti·ªán", "quy t·∫Øc", "quy ƒë·ªãnh", "ti√™u chu·∫©n", "h√†nh vi", "vƒÉn h√≥a", "h·ªá th·ªëng", "h·ªá th·ªëng", "t·ªï ch·ª©c",
  "th·ª±c hi·ªán", "ph√°t h√†nh", "c·∫≠p nh·∫≠t", "n√¢ng c·∫•p", "b·∫£o m·∫≠t", "t·ªëi ∆∞u", "t√°i ch·∫ø", "t√°i t·∫°o", "kh·∫£o s√°t", "th·ª≠ nghi·ªám",
  "tham v·∫•n", "c·ªë v·∫•n", "chuy√™n gia", "b√°o c√°o", "th√¥ng b√°o", "th√¥ng tin", "h∆∞·ªõng d·∫´n", "ch√≠nh s√°ch", "k·∫ø ho·∫°ch", "chi·∫øn l∆∞·ª£c",
  "ph∆∞∆°ng √°n", "c√¥ng c·ª•", "ph∆∞∆°ng ph√°p", "quy tr√¨nh", "ph∆∞∆°ng ti·ªán", "quy t·∫Øc", "quy ƒë·ªãnh", "ti√™u chu·∫©n", "h√†nh vi", "vƒÉn h√≥a",
  "h·ªá th·ªëng", "t·ªï ch·ª©c", "th·ª±c hi·ªán", "ph√°t h√†nh", "c·∫≠p nh·∫≠t", "n√¢ng c·∫•p", "b·∫£o m·∫≠t", "t·ªëi ∆∞u", "t√°i ch·∫ø", "t√°i t·∫°o"
];

const wordScrambleGames = {};
const GAME_DURATION = 120000;
let HINT_COST = 10000;
const MAX_HINTS = 3;

function getRandomWord() {
  const randomIndex = Math.floor(Math.random() * vietnameseWords.length);
  return vietnameseWords[randomIndex];
}

function scrambleWord(word) {
  const shuffledWord = word.split('').sort(() => Math.random() - 0.5).join('');
  return shuffledWord;
}

function calculateReward(attempts) {
  const rewards = [150000, 100000, 80000, 60000, 50000];
  const index = Math.min(Math.floor(attempts / 2), rewards.length - 1);
  return rewards[index];
}

async function startWordScrambleGame(api, event) {
  const originalWord = getRandomWord();
  const scrambledWord = scrambleWord(originalWord);

  const game = {
    originalWord,
    scrambledWord,
    attempts: 0,
    startTime: Date.now(),
    timer: null,
    winnerIDs: [],
    attemptedPlayers: {},
    hintsUsed: 0,
    hintCost: HINT_COST
  };

  wordScrambleGames[event.threadID] = game;
  game.timer = setTimeout(() => endWordScrambleGame(api, event), GAME_DURATION);

  const hintExplanation = `üí° ƒê·ªÉ s·ª≠ d·ª•ng g·ª£i √Ω, g√µ "hint". M·ªói l·∫ßn s·ª≠ d·ª•ng g·ª£i √Ω s·∫Ω m·∫•t ${formatMoney(HINT_COST)} t·ª´ s·ªë ti·ªÅn c·ªßa b·∫°n.`;

  api.sendMessage({
    body: `üî† B·∫Øt ƒë·∫ßu tr√≤ ch∆°i 'Gi·∫£i m√£ t·ª´ v·ª±ng ti·∫øng Vi·ªát'!\nH√£y gi·∫£i m√£ t·ª´: ${scrambledWord}\n${hintExplanation}`,
  }, event.threadID);
}

async function handleWordScrambleInput(api, event) {
  try {
    const message = event.body.trim().toLowerCase();
    const game = wordScrambleGames[event.threadID];
    if (!game) return;

    if (message === "end") {
      clearTimeout(game.timer);
      delete wordScrambleGames[event.threadID];
      api.sendMessage(`‚è±Ô∏è B·∫°n ƒë√£ ch·ªçn k·∫øt th√∫c tr√≤ ch∆°i.\nƒê√°p √°n ƒë√∫ng l√† "${game.originalWord}".\nTr√≤ ch∆°i ƒë√£ k·∫øt th√∫c sau ${Math.floor((Date.now() - game.startTime) / 1000)} gi√¢y.`, event.threadID);
      return;
    }

    if (message === "hint") {
      if (game.hintsUsed >= MAX_HINTS) {
        api.sendMessage("‚ùå B·∫°n ƒë√£ d√πng h·∫øt s·ªë l·∫ßn s·ª≠ d·ª•ng g·ª£i √Ω cho tr√≤ ch∆°i n√†y!", event.threadID);
        return;
      }

      const moneyData = loadMoneyData();
      if (moneyData[event.senderID] < game.hintCost) {
        api.sendMessage("‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ s·ª≠ d·ª•ng g·ª£i √Ω!", event.threadID);
        return;
      }
      moneyData[event.senderID] -= game.hintCost;
      saveMoneyData(moneyData);
      game.hintsUsed++;
      game.hintCost *= 2;
      api.sendMessage(`üí° G·ª£i √Ω: "${game.originalWord.slice(0, game.hintsUsed * 2)}". S·ªë ti·ªÅn c√≤n l·∫°i: ${formatMoney(moneyData[event.senderID])}`, event.threadID);
      return;
    }

    game.attempts++;
    if (normalizeVietnamese(message) !== normalizeVietnamese(game.originalWord)) {
      api.setMessageReaction("‚ùå", event.messageID, () => {}, true);
      return;
    }

    if (!game.winnerIDs.includes(event.senderID)) game.winnerIDs.push(event.senderID);

    if (game.timer) {
      clearTimeout(game.timer);
      delete wordScrambleGames[event.threadID];

      const rewardMoney = calculateReward(game.attempts);
      const moneyData = loadMoneyData();
      const rewardPerPlayer = Math.floor(rewardMoney / game.winnerIDs.length);
      game.winnerIDs.forEach(id => {
        moneyData[id] = (moneyData[id] || 0) + rewardPerPlayer;
      });
      saveMoneyData(moneyData);

      const winnerNamesPromises = game.winnerIDs.map(id =>
        new Promise((resolve, reject) => {
          api.getUserInfo(id, (err, ret) => {
            if (err) reject(err);
            resolve(ret[id].name);
          });
        })
      );
  
      const winnerNames = await Promise.all(winnerNamesPromises);  

      api.sendMessage({
        body: `üéâ Ch√≠nh x√°c! Nh·ªØng ng∆∞·ªùi ch∆°i sau ƒë√£ gi·∫£i m√£ t·ª´ "${game.originalWord}": ${winnerNames.join(', ')}\nüí∞ M·ªói ng∆∞·ªùi nh·∫≠n ƒë∆∞·ª£c ${formatMoney(rewardPerPlayer)}.`,
        mentions: game.winnerIDs.map((id, index) => ({
          tag: winnerNames[index],
          id: id
        }))
      }, event.threadID);
    }
  } catch (error) {
    console.error("Error handling input:", error);
  }
}

function endWordScrambleGame(api, event) {
  const game = wordScrambleGames[event.threadID];

  if (!game || !game.timer) return;

  const { originalWord, startTime } = game;
  const elapsedTime = Date.now() - startTime;

  if (elapsedTime >= GAME_DURATION) {
    clearTimeout(game.timer);
    delete wordScrambleGames[event.threadID];

    const durationSeconds = Math.floor(elapsedTime / 1000);
    const endMessage = `‚è±Ô∏è B·∫°n ƒë√£ h·∫øt th·ªùi gian gi·∫£i m√£.\nKh√¥ng ai ƒëo√°n ƒë√∫ng, ƒê√°p √°n ƒë√∫ng l√† "${originalWord}".\nTr√≤ ch∆°i ƒë√£ k·∫øt th√∫c sau ${durationSeconds} gi√¢y.`;

    api.sendMessage(endMessage, event.threadID);
  }
}

function normalizeVietnamese(str) {
  return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/ƒë/g, "d").replace(/ƒê/g, "D");
}

module.exports = {
  name: "wordscramble",
  author: "Nguy√™n Blue",
  category: "GAMES",
  version: "1.1",
  nopre: true,
  access: 0,
  wait: 0,
  desc: "Game gi·∫£i m√£ t·ª´ v·ª±ng ti·∫øng Vi·ªát",
  async execute({ api, event }) {
    if (wordScrambleGames[event.threadID]) {
      api.sendMessage("‚ùå Tr√≤ ch∆°i 'Gi·∫£i m√£ t·ª´ v·ª±ng ti·∫øng Vi·ªát' ƒëang di·ªÖn ra trong nh√≥m n√†y. H√£y ho√†n th√†nh ho·∫∑c ch·ªù k·∫øt th√∫c tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu tr√≤ ch∆°i m·ªõi.", event.threadID);
      return;
    }

    startWordScrambleGame(api, event);

    api.listenMqtt(async (err, event) => {
      if (err) {
        console.error(err);
        return;
      }

      if (event.type === "message" && event.isGroup && event.body) {
        await handleWordScrambleInput(api, event);
      }
    });
  },
};
